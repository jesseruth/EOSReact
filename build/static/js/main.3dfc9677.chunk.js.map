{"version":3,"sources":["logo.svg","actions/index.js","queries/index.tsx","components/Accounts.tsx","selectors/index.tsx","components/AppContainer.js","App.tsx","serviceWorker.js","reducers/reducers.js","index.js"],"names":["module","exports","__webpack_require__","p","ADD_TODO","TOGGLE_TODO","SET_VISIBILITY_FILTER","Accounts","handleClick","_this$props","_this","props","onTodoClick","reduxQueryTest","console","log","this","react_default","a","createElement","name","onClick","Component","getVisibleTodos","createSelector","state","visibilityFilter","todos","filter","t","completed","AppContainer","connect","test1","dispatch","id","type","index","mutateAsync","url","body","account_name","update","message","prev","next","App","inputValue","handleInputChange","e","target","value","setState","className","src","logo","alt","onChange","components_AppContainer","Boolean","window","location","hostname","match","SHOW_ALL","d","__webpack_exports__","getQueries","getEntities","queries","entities","combinedReducers","combineReducers","arguments","length","undefined","action","Object","toConsumableArray","concat","text","map","todo","assign","entitiesReducer","queriesReducer","store","createStore","applyMiddleware","queryMiddleware","logger","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3dfc9677.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/*\n * action types\n */\n\nexport const ADD_TODO = 'ADD_TODO'\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\n\n/*\n * other constants\n */\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n\n/*\n * action creators\n */\n\nexport function addTodo(text) {\n  return {type: ADD_TODO, text}\n}\n\nexport function toggleTodo(index) {\n  return {type: TOGGLE_TODO, index}\n}\n\nexport function setVisibilityFilter(filter) {\n  return {type: SET_VISIBILITY_FILTER, filter}\n}","export const helloRequest = () => ({\n  url: 'https://proxy.eosnode.tools/v1/chain/get_account',\n  body: { \"account_name\": \"gqytgobvgene\" },\n  update: {\n    message: (prev: any, next: any) => next,\n  },\n});","import React, { Component } from 'react';\n\ninterface Props {\n  name: string,\n  onTodoClick: (id: string) => void,\n  reduxQueryTest: () => void,\n  todos: number,\n}\n\nclass Accounts extends Component<Props> {\n  handleClick = () => {\n    const {\n      onTodoClick,\n      reduxQueryTest,\n    } = this.props;\n    onTodoClick(\"is\");\n    reduxQueryTest();\n    console.log('test')\n  };\n\n  render() {\n    console.log('Accounts', this.props);\n    return (\n      <div>\n        <h1>Hello, {this.props.name}</h1>\n        <button onClick={this.handleClick}>Test</button>\n      </div>\n    );\n  }\n}\n\nexport default Accounts;","import { createSelector } from 'reselect'\n\nconst getVisibilityFilter = (state: any) => state.visibilityFilter\nconst getTodos = (state: any) => state.todos\n\nexport const getVisibleTodos = createSelector(\n  [getVisibilityFilter, getTodos],\n  (visibilityFilter, todos) => {\n    switch (visibilityFilter) {\n      case 'SHOW_ALL':\n        return todos\n      case 'SHOW_COMPLETED':\n        return todos.filter((t: any) => t.completed)\n      case 'SHOW_ACTIVE':\n        return todos.filter((t: any) => !t.completed)\n    }\n  }\n)","import { connect } from 'react-redux'\nimport { toggleTodo } from '../actions';\nimport { helloRequest } from '../queries';\nimport Accounts from './Accounts'\nimport { getVisibleTodos } from '../selectors'\nimport { mutateAsync } from 'redux-query';\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: getVisibleTodos(state),\n    name: '',\n    test1: 2,\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onTodoClick: (id) => {\n      dispatch(toggleTodo(id))\n    },\n    reduxQueryTest: () => dispatch(mutateAsync(helloRequest())),\n  }\n};\n\nconst AppContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Accounts);\n\nexport default AppContainer","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AppContainer from './components/AppContainer'\n\n\nclass App extends Component {\n  state = {\n    inputValue: \"\"\n  };\n\n  handleInputChange = (e: any) => {\n    console.log(e.target.value);\n    this.setState({ inputValue: e.target.value })\n  };\n\n  render() {\n    const {\n      inputValue,\n    } = this.state;\n\n    console.log('App', this.props);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n\n\n        </header>\n        <div>\n          <input onChange={this.handleInputChange} value={inputValue}/>\n          <div>test</div>\n        </div>\n        <AppContainer/>\n        <div>\n          Booting up and getting information from EOS Node Proxy:\n          https://proxy.eosnode.tools/v1/chain/get_info\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ADD_TODO,\n  TOGGLE_TODO,\n  SET_VISIBILITY_FILTER,\n  VisibilityFilters\n} from '../actions/index'\n\nconst {SHOW_ALL} = VisibilityFilters;\n\nexport function visibilityFilter(state = SHOW_ALL, action) {\n  console.log('visibilityFilter');\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport function todos(state = [], action) {\n  console.log('todos');\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false\n        }\n      ]\n    case TOGGLE_TODO:\n      return state.map((todo, index) => {\n        if (index === action.index) {\n          return Object.assign({}, todo, {\n            completed: !todo.completed\n          })\n        }\n        return todo\n      })\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {todos, visibilityFilter} from './reducers/reducers';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore, combineReducers} from 'redux';\nimport { entitiesReducer, queriesReducer, queryMiddleware } from 'redux-query';\nimport logger from 'redux-logger';\n\nexport const getQueries = (state) => state.queries;\nexport const getEntities = (state) => state.entities;\n\nconst combinedReducers = combineReducers({\n  visibilityFilter,\n  todos,\n  entities: entitiesReducer,\n  queries: queriesReducer,\n});\n\n\nconst store = createStore(\n  combinedReducers,\n  applyMiddleware(queryMiddleware(getQueries, getEntities), logger)\n);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}